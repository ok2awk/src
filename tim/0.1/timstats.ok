# /* vim: set filetype=awk ts=2 sw=2 sts=2 expandtab: */
BEGIN {
  OK.stats.author  = "Tim Menzies"
  OK.stats.email   = "tim@menzies__us"
  OK.stats.version = "0.1"
  OK.stats.license = "opensource__org/licenses/BSD-3-Clause"
  OK.stats.more    = "ok2awk__github__io/info/stats"
}

"""

## About Stats

"""
      
@include "oklib"

function Normal(i, mu,sd) {
  i.mu= mu == "" ? 0 : mu
  i.sd= sd == "" ? 1 : sd
}
function NormalGet(i) {
  return i.mu + i.sd * NormalGet1()
}
function NormalGet1(i,      w,x1,x2) {
  w=1;
  while (w >= 1) {
    x1= 2.0 * rand() - 1
    x2= 2.0 * rand() - 1
    w = x1*x1 + x2*x2
  };
  w = sqrt((-2.0 * log(w))/w)
  return x1 * w;
}
function beta10() { return 1 - beta90() }
function beta20() { return 1 - beta80() }
function beta25() { return 1 - beta75() }
function beta33() { return 1 - beta67() }
function beta40() { return 1 - beta60() }
function beta50() { return rand()       }
function beta60() { return rand()^0.67  }
function beta67() { return rand()^0.5   }
function beta75() { return rand()^0.33  }
function beta80() { return rand()^0.25  }
function beta90() { return rand()^(1/9) }

function normal(mu,sd,i) {
  Normal(i,mu,sd)
  return Normal1(i)
}
function any2(all,   n,i) {
  n = length(all)
  i = int(n*rand()) + 1  
  if (i==n)
    i--
  return all[i] + rand()*(all[i+1]-all[i])
}
function triangle(a,c,b,   u) {
  u = rand()
  if (u < (c-a)/(b-a))
    return a + (    u*(b-a)*(c-a))^0.5
  else
    return b - ((1-u)*(b-a)*(b-c))^0.5
}
function Hist(i,lo,hi,bins) {
  has(i,"_data")
  i.bins  = bins
  i.lo    = lo
  i.hi    = hi
  i.fmt   = "%8.1f : %s"
  i.char  = "*"
  i._maxb = 0
  i.max   = 50
}
function HistAdd(i,x,    b,n) {
  if(x == i.hi)
    x -= 1e-32
  b = int(i.bins*(x - i.lo)/(i.hi - i.lo + 1e-32))
  n = ++i._data[b]
  if (n >  i._maxb)
    i._maxb=n
}
function HistShow(i,   scale,gap,b,n,show) {
  scale = i._maxb > i.max ? i.max/i._maxb : 1
  gap = (i.hi - i.lo)/i.bins
  for(b=0; b< i.bins; b++) { 
    n = i._data[b]
    show = n > 0 ? n : ""
    printf(i.fmt " " show "\n", 
           i.lo + b*gap,
           chars(n * scale, i.char))
}}
function Cliffs(i, want) {
  i.large  = 0.475
  i.medium = 0.33
  i.small  = 0.147
  i.want   = either(want,"small")   
  i.lt = i.gt = i.n = 0
}
function cliffsDelta(lst1,lst2,  i) {
  Clifast(i)
  return @Add(i,lst1,lst2)
}
function CliffsAdd(i,lst1,lst2,  f,v,t) {
  # return 1 if lst1 and lst2 are trivially different
  i.n = length(lst1) * length(lst2)
  @Calc(i,lst1,lst2)
  return abs(i.gt - i.lo) / (i.n + 1e-32) < i[i.want]
}
function CliffsCalc(i,lst1,lst2,     
                   j,k,x,y) {
  for(j in lst1)
    for(k in lst2) {
      x= lst1[j]
      y= lst2[k]
      if(x > y) i.gt++
      if(x < y) i.lt++
}}

function Clifast(i) {
  isa(CliffsDelta(i))
}
function ClifastCalc(i,lst1,lst2,   
                   n,lst3,j,x,lo,hi) {
  n= asort(lst2, lst3)
  for(j in lst1) {
    x= lst1[j]
    lo= hi= bsearch(lst3,x,1)
    while(lo >= 1 && lst3[lo] >= x) lo-- 
    while(hi <= n && lst3[hi] <= x) hi++
    i.lt += n - hi + 1
    i.gt += lo
}}

