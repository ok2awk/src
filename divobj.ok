# /* vim: set filetype=awk ts=2 sw=2 sts=2 et : */
BEGIN {
  OK.tips.author  = "'Tim Menzies'"
  OK.tips.email   = "tim@menzies__us"
  OK.tips.version = "0__1"
  OK.tips.license = "'opensource__org/licenses/BSD-3-Clause"
  OK.tips.more    = "ok2awk__github__io/src/divobj"
}
"""

## About Divobj

"""

@include "ok"
@include "csv"

function Node(i) { 
  i.n  = i.mu = i.m2 = i.sd = 0 
  i.lo =  1e32
  i.hi = -1e32
  i.use= 0 # set to 1 if Node passes sanity checks
  has(i,"left")
  has(i,"right")
  has(i,"all")
}
function Node1(i,v,          delta) {
  v = v+0
  if (v < i.lo) i.lo = v
  if (v > i.hi) i.hi = v
  i.n  += 1
  i.all[i.n] = v
  delta = v - i.mu
  i.mu += delta/i.n
  i.m2 += delta*(v-i.mu)
  if (i.n > 1)
	  i.sd = (i.m2/(i.n-1))^0.5
  return v
}
function Nodes(i,  lvl, q){
  q=", "
  print(lvl "[" i.lo q i.hi q i.n q i.sd "]")
  if (i.left.use)
    Nodes(i.left,lvl "|  ")
  if (i.right.use)
    Nodes(i.right,lvl "|  ")
}
function Div(i) {
  i.cohen  = 0.2
  i.size   = 0.5
  i.min    = 20
  i.epsilon= 0
  have(i,"root","Node")
}
function Div1(i,lst1,    lst2,j,n) {
  n=asort(lst1,lst2)
  for(j=1;j<=n;j++)
    Node1(i.root, lst2[j])
  i.epsilon = i.root.sd*i.cohen
  i.min     = length(lst2)**i.size
  DivRecurse(i, i.root)
}
function DivRecurse(i, t,     j) {
  if (t.n < 2*i.min)        
    return 
  if (t.all[t.n] - t.all[1] < i.epsilon) 
    return 
  t.use = 1
  Node(t.left)
  Node(t.right) 
  while(j < t.n/2)
    Node1(t.left,  t.all[++j])
  while(j < t.n)
    Node1(t.right, t.all[++j])
  if (t.right.mu - t.left.mu >= i.epsilon)  
    if (xpectedSd(t.right, t.left) < t.sd)  {
      DivRecurse(i, t.left)
      DivRecurse(i, t.right)
}}
function xpectedSd(i,j,    n) {
  n = i.n + j.n
  return i.n/n*i.sd + j.n/n*j.sd
}
function cdom(xs,ys,ws,lo,hi,
							n,i,x,y,sum1,sum2)  { # ws[-1,1,1] min,max,max 
	n = length(xs)
	for(i in xs) {
		x = (xs[i] - lo[i] ) / (hi[i] - lo[i] + 1e-32)
		y = (ys[i] - lo[i] ) / (hi[i] - lo[i] + 1e-32)
		sum1 -= 2.71828^( ws[i]*(x - y)/n )
		sum2 -= 2.71828^( ws[i]*(y - x)/n )
	}
	return sum1/n < sum2/n
} 
# need min max
#function divobj(f,  csv) {
#  Csv(csv,f)
#  CsvRead(csv)
#  for(w in csv.i.more) ws[w]=  1
#  for(w in csv.i.less) ws[w]= -1
#  for(r1 in i.rows) { 
#    for(w in ws)
#      obj1[ w ] = csv.rows[r1][w]
#    for(r2 in i.rows) 
#      divobj1(csv,r1,r2,ws, obj1)
#      
#   
#  }
#}
#function divobj1(csv,r1,r2,ws, obj1, obj2) {
#  for(w in ws) 
#    obj2[ w ] = csv.rows[r2][w]
#  cdom(obj1, obj2, ws) 
#
#
#}
