# /* vim: set filetype=awk ts=2 sw=2 sts=2  : */
BEGIN {
	OK.tips.author  = "'Tim Menzies'"
  OK.tips.email   = "tim@menzies__us"
  OK.tips.version = "0.1"
  OK.tips.license = "'opensource__org/licenses/BSD-3-Clause"
  OK.tips.more    = "ok2awk__github__io/src/csv"
}
"""

## About Csv

"""

@include "oklib"

function Row(i) {
	i.id = id()
	has(i,  "raw")
	has(i,  "cooked")
	i.cdoms=0
}
function Range(i) {
	i.lo =  1e32
	i.hi = -1e32
}
function Range01(i,v) {
  return (v - i.lo ) / (i.hi - i.lo + 1e-32)
}
function Range1(i,v) {
	v += 0
	if (v < i.lo) i.lo = v
	if (v > i.hi) i.hi = v
	return v
}
function Table(i,name) {
	i.file   = name
  i.sep    = ","
  i.ignore = "-"
  i.klassc = "/"; has(i, "klass")
  i.numc   = ":"; has(i, "num")
  i.morec  = ">"; has(i, "more")
  i.lessc  = "<"; has(i, "less")
	has(i,  "weight")
  has(i,  "range")
	has(i,  "rows")
	has(i,  "header")
	has(i,  "backer")
	has(i,  "rw")
}
function csv2Table(i,    str,cells) {
	while((getline str < i.file ) > 0) {
    gsub(/[ \t\r]*/,"",str) # no whitespce:
    gsub(/#.*$/,"",str)     # no comments
    if (str)  {             # if anything left
      split(str,cells,i.sep)
		  if (length(i.header))
				TableRow(i,cells) 
			else
				TableHeader(i,cells)
	}}
  close(i.file)
}
function TableHeader(i,headers,    head,all,r,w) {
	all=length(headers)
  for(r=1; r<=all; r++) {
    head = headers[r]
    if (head ~ i.ignore)  
      continue
    i.rw[ ++w ] = r
    i.header[w] = head
    i.backer[ head ] = w
    if (head ~ i.klassc)     i.klass[w]
		else if (head ~ i.morec) i.more[w] 
		else if (head ~ i.lessc) i.less[w] 
		else if (head ~ i.numc)  i.num[w]
		# ---------------------------------------------
		if (w in i.more) i.weight[w] =  1
	  if (w in i.less) i.weight[w] = -1
		if (w in i.more) have(i.range, w, "Range")
    if (w in i.less) have(i.range, w, "Range") 
    if (w in i.num)  have(i.range, w, "Range")
}}
function TableRow(i,values,    j,w,value) {
	j = length(i.rows) + 1
	have(i.rows, j, "Row")
  for(w in i.rw) {
    value = values[ i.rw[w] ]
	  if(w in i.range) 
			value = Range1(i.range[w], value)
    i.rows[j].raw[w] = value
}}
function TableCdom(i,r1,r2, 
                 n,w,x,y,sum1,sum2,e) {
  e = 2.71828
	n = length(i.weight)
	for(w in i.weight) {
		   x  = Range01(i.range[w], i.rows[r1].raw[w])
		   y  = Range01(i.range[w], i.rows[r2].raw[w])
		sum1 -= e ^ ( i.weight[w] * (x - y)/n )
		sum2 -= e ^ ( i.weight[w] * (y - x)/n )
	}
	return sum1/n < sum2/n
} 
function cmp_cdoms(a,b,c,d) {
	return b.cdoms + 0 < d.cdoms + 0
}
function TableSort(i,   sum,r1,r2,tmp,a) {
	for(r1 in i.rows)  
		for(r2 in i.rows) 
		  if (r1 > r2)  
			  if (TableCdom(i,r1,r2))  
				  i.rows[r1].cdoms++
  asort(i.rows,i.rows,"cmp_cdoms")
}
function Nums(i) {
  has(i,"nums")
  i.n = 0
  i.xpect = 0
}
function Nums1(i,x,v) {
  if (! (x in i.nums))
   have(i.nums, x, "Num")
  i.n++
  Num1(i.nums[x],v)
} 
function NumsSd(i,    out,x) {
  out = 0
  for(x in i.nums) 
    out += i.nums[x].sd * i.nums[x].n / i.n
  return out
} 
function Sym(i) {
  has(i,"count")
  i.mode = ""
  i.most = 0
  i.n    = 0
}
function Sym1(i,str,     n) {
  i.n++
  now = ++i.counts[str]
  if (now > i.most) {
    i.mode = str
    i.most = now
}}
function SymEnt(i,   out,str,p) {
  out = 0
  for(str in i.counts) {
    p = i.counts[str]/i.n
    out -= p*log(p)/log(2)
  }
  return out
}
function Node(i,tiny,xepsilon,yepsilon) { 
  i.use    =   0 # set to 1 if Node passes sanity checks
  has(i,   "left")
  has(i,   "right")
  has(i,   "rows")
	haves(i, "x","Num",xepsilon,tiny)
	haves(i, "y","Num",yepsilon,tiny)
}
function Node1(i,x,y,r) {
	i.rows[ length(i.rows) + 1 ] = r
	Num1(i.x,x)
	Num1(i.y,y)
}
function NodeXpectSD(i) {
	return NodeXpectSDs(i,i.y.n) 
}
function NodeXpectSDs(i,n) {
	if (NodeLeaf(i))
		return i.y.sd * i.y.n/n
	else
		return NodeXpects(i.left,n) + NodeXpects(i.right,n)
}
function NodeLeaf(i) {
	if (length(i.left) == 0 || i.left.cut == 0)
	  if (length(i.right) == 0 || i.right.cut == 0)
		  return 1
}
function NodeTrivial(i) {
	return NumTrivial(i.x) || NumTrivial(i.y)
}
function NodeUseless(i) {
	 n1 = i.left.y.n
  sd1 = i.left,y.sd
	 n2 = i.right.y.n
  sd2 = i.right.y.sd
	  n = i.y.n
   sd = i.y.sd 
  return sd <= (n1/n*sd1 + n2/n*sd2)
}
function Num(i) { 
  i.n  = i.mu = i.m2 = i.sd = 0 
  i.lo =  1e32
  i.hi = -1e32
	has(i, "sample")
}
function NumTrivial(i) {
	if (i.n < 2*i.tiny)          return 1
	if (i.hi - i.lo < i.epsilon) return 1
	return 0
}
function Num1(i,v,          delta) {
  v = v+0
  if (v < i.lo) i.lo = v
  if (v > i.hi) i.hi = v
  i.n  += 1
  i.all[i.n] = v
  delta = v - i.mu
  i.mu += delta/i.n
  i.m2 += delta*(v-i.mu)
  if (i.n > 1)
	  i.sd = (i.m2/(i.n-1))^0.5
	Sample1(i,sample,v)
  return v
}
function NumMedian(i) {
	return median(i.sample.all)
}
function Sample(i,     most) {
  i.most = most ? most : 64 # keep up to 64 items
  has(i,"all")              # i.all holds the kept value
  i.n=0
}
function Sample1(i,v,    m) {
  i.n++
  m = length(i.all)
  if (m < i.most)   # the cache is not full, add something
    i.all[ m+1 ] = v
  else if (rand() < m/i.n)   # else, sometimes, add "v"
    i.all[ int(len*rand()) + 1 ] = v
}
function Nodes(i,  lvl, q){
  q=", "
  print(lvl "[" i.num.lo q i.num.hi q i.num.n q i.num.sd "]")
  if (i.left.use)
    Nodes(i.left,lvl "|  ")
  if (i.right.use)
    Nodes(i.right,lvl "|  ")
}
#XXX sort attrs and vidie
function symsSd(i,t,col,   r) {
  Nums(i)
  for(r in t.rows) {
    Nums1(i, t.rows[r].raw[col], 
             t.rows[r]/cdoms)
  return i.xpect = NumsSd(i)  
}
function DivNums(i,col) {
  i.cohen = 0.2
  i.size  = 0.5
	i.col   = col
  have(i,"root","Node")
}
function DivNums1(i,t,  r) {
	Node(i.root)
  for(r in t.rows) 
		Node1(i.root,
					t.rows[r].raw[i.col],
					t.rows[r].cdom,
	        r)
  divide(t.rows,
				 i.root, 
				 i.col,
         length(t.rows) ^ i.size, # tiny
         i.root.x.sd * i.cohen,   # xepsilon
         i.root.y.sd * i.cohen)   # yepsilon
	return i.root.xpect = NodeXpect(i.root)
}
# How to score 
# the 
function divide(rows,here,col,tiny,xep,yep,     
										val,what,r,mid) {
	if (NodeTrivial(here))
		return
  here.use = 1
  Node(here.left,  tiny,xep,yep)
  Node(here.right, tiny,xep,yep)
	mid = NumMedian( here.x )
  for(r in here.all)  {
		val  = rows[r].raw[col]
		what = val < mid ? "left" : "right"
	  Node1(here[what], val, rows[r].cdoms, r)
	}
	if (here.right.x.mu - here.left.x.mu < xeps) 
		return
	if (NodeUseless(here))  
		return
  divide(rows,here.left, col,tiny,xep,yep) 
  divide(rows,here.right,col,tiny,xep,yep)
}
