#!/bin/bash
# /* vim: set filetype=sh ts=2 sw=2 sts=2  : */

#######################################################################
# Begin CONFIG
# The follow defaults can be over-written by change the file ok.rc

MyName="Omar Khayyam" # 11th century scholar
MyEmail="omar@khayyam.persia"
MySite="khayyam.info"
MyLicense="'opensource.org/licenses/BSD-3-Clause"
MyHeader="# /* vim: set filetype=sh ts=2 sw=2 sts=2  : */"
  
Awk=_var/awk # where to keep the generated awk files
Lib=_var/lib # where to keep the generated awk files
Tmp=_var/tmp # where to write temporaroes
Docs=docs    # where to write the generated markdown files

if [ -f "./ok.rc" ]; then
  . ./ok.rc
fi

# End CONFIG
#######################################################################

dirs() {
  mkdir -p $Docs $Awk $Tmp $Lib
}
build() {
  f=${1%.*}
	here=$PWD
	cd $here/$Awk
	gawk '
	BEGIN { print "#!'`which gawk`' -f "
		      build("'$f'") 
	}
	function build(f,    seen,lvl, g,str,a) {
		g = f ".awk"
	  if (g in seen) return
		seen[g]
		print "# --------------------------------------------"
		print "# " lvl "/" f
		while((getline str < g) > 0) {
		  if (str ~ /^@include/) {
				split(str,a,"\"")
				build(a[2], seen,lvl "/" f) 
			} else
			  print str
		}
		close(g)
	} ' >  $here/$Lib/$f
	cd $here
}
makeawk() {
  echo "# $1 to _awk/" 1>&2
  cat $1 | gawk '
  BEGIN {In = 1}
  gsub(/^"""/,"") {
    In =  1 - In
  }
  { txt = gensub(/\.([a-zA-Z_])([a-zA-Z0-9_]*)/,
                 "[\"\\1\\2\"]",
                 "g",
                 $0)
    gsub(/__/,".",txt)
    print (In ? "" : "## ") txt
  }
  '
}
makedoc() {
  echo "# $1 to docs/" 1>&2
  cat $1 | gawk '
  BEGIN {In = 1; Pre=1}
  gsub(/^"""/,"") {
    In =  1 - In
    if (Pre)
       Pre=0
    else {
      if (In)  {
        print ""
        print "```c " $0
      } else {
        print "```" $0
        print ""
     }
    }
    next
  }
  Pre  { next }
      { sub(/^#/,"")
       print }
  END  { if (In) print "```\n" }
  '
}
vars() {
  if [ -f "$Tmp/awkvars.out" ]
  then
    egrep -v '[A-Z][A-Z]' $Tmp/awkvars.out |
    sed 's/^/W> rogue local: /'
  fi
}
file() {
  if [ -z "$1" ]; then
    echo "Missing stem"
  elif [ -f "$1.ok" ];  then
    echo "cannot create $1 files, they already exists"
  else
    cat<<-EOF > $1.ok
$MyHeader
OK.tips.author  = "$MyName"
OK.tips.email   = "$MyEmail"
OK.tips.version = "0.1"
OK.tips.license = "$MyLicense"
OK.tips.more    = "$MySite/$1"

"""

## About ${1^}

"""

@include "ok"

EOF
  cat<<-EOF > ${1}1.ok
$MyHeader

"""

## Testing ${1^}

"""

@include "ok"
@include "$1"

BEGIN {
  tests("")
}
EOF
   echo "See $1.ok (for code) and  ${1}1.ok (for tests)."
fi
}
profile() {
  if [ -f "$Tmp/awkprof.out" ]; then
    cat $Tmp/awkprof.out
  fi
}
run() {
  gawk --source 'BEGIN { '"$*"'}'
}
tests() {
  for n in $*; do
    for i in *$n.ok; do
      f=${i%.*}
      echo ""
      echo "### --- $f -------------"
      ./ok $f
    done | tee $Tmp/test$n.out
    echo -n "PASSED "; grep -c PASSED $Tmp/test$n.out
    echo -n "FAILED "; grep -c FAILED $Tmp/test$n.out
  done
}
ready() {
  for ok1 in *.ok; do
  	awk1=$Awk/${ok1%.*}.awk
  	doc1=$Docs/${ok1%.*}.md
	  if [ "$ok1" -nt "$awk1" ]; then makeawk $ok1 > $awk1; fi
	  if [ "$ok1" -nt "$doc1" ]; then makedoc $ok1 > $doc1; fi
         git add $Docs
	git add $Docs/*
  done
}
gitready() {
  git config --global user.email $MyEmail
  git config --global user.name  $MyName
  git config --global credential.helper cache
  git config credential.helper 'cache --timeout=3600'
}
old() {
  gitready
  git pull origin master
}
new() {
  gitready
  git add .
  git commit -am newStuff
  git push origin master
}

dirs
ready

if   [ "$1" == "new"     ]; then new;
elif [ "$1" == "old"     ]; then old;
elif [ "$1" == "profile" ]; then profile;
elif [ "$1" == "1"       ]; then tests 1;
elif [ "$1" == "12"      ]; then tests 1 2;
elif [ "$1" == "123"     ]; then tests 1 2 3;
elif [ "$1" == "1234"    ]; then tests 1 2 3 4;
elif [ "$1" == "file"    ]; then file $2;
elif [ "$1" == "build"   ]; then build $2;
elif [ "$1" == "do"      ]; then
  shift
  run "$*"
elif [ -f "$Awk/$1.awk"  ]; then
  AWKPATH="$Awk:$AWKPATH" gawk          \
       --dump-variables=$Tmp/awkvars.out \
       --profile=$Tmp/awkprof.out         \
       -f $1.awk
  vars;
else
	echo "usage ./ok (new | old | profile | file)"
fi
