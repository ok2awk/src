# /* vim: set filetype=awk ts=2 sw=2 sts=2  : */
BEGIN {
  OK.tips.author  = "Omar Khayyam"
  OK.tips.email   = "omar@khayyam__persia"
  OK.tips.version = "0.1"
  OK.tips.license = "opensource__org/licenses/BSD-3-Clause"
  OK.tips.more    = "ok2awk__github__io/info/stats"
}

"""

## About Stats

"""

@include "oklib"

function Normal(i, mu,sd) {
	i.mu= mu == "" ? 0 : mu
	i.sd= sd == "" ? 1 : sd
}
function Normal1(i) {
  return i.mu + i.sd * NormalZ()
}
function NormalZ(i,      w,x1,x2) {
  w=1;
  while (w >= 1) {
    x1= 2.0 * rand() - 1
    x2= 2.0 * rand() - 1
    w = x1*x1 + x2*x2
  };
  w = sqrt((-2.0 * log(w))/w)
  return x1 * w;
}
function beta10() { return 1 - beta90() }
function beta20() { return 1 - beta80() }
function beta25() { return 1 - beta75() }
function beta33() { return 1 - beta67() }
function beta40() { return 1 - beta60() }
function beta50() { return rand()       }
function beta60() { return rand()^0.67  }
function beta67() { return rand()^0.5   }
function beta75() { return rand()^0.33  }
function beta80() { return rand()^0.25  }
function beta90() { return rand()^(1/9) }

function normal(mu,sd,i) {
	Normal(i,mu,sd)
	return Nomral1(i)
}
function any2(all,   n,i) {
	n = length(all)
	i = int(n*rand()) + 1  
	if (i==n)
		i--
	return all[i] + rand()*(all[i+1]-all[i])
}
function triangle(a,c,b,   u) {
	u = rand()
	if (u < (c-a)/(b-a))
		return a + (    u*(b-a)*(c-a))^0.5
	else
		return b - ((1-u)*(b-a)*(b-c))^0.5
}
function Hist(i,lo,hi,bins) {
	has(i,"_data")
	i.bins  = bins
  i.lo    = lo
  i.hi    = hi
	i.fmt   = "%8.1f : %s"
	i.char  = "*"
	i._maxb = 0
	i.max   = 50
}
function Hist1(i,x,    b,n) {
	if(x == i.hi)
	  x -= 1e-32
	b = int(i.bins*(x - i.lo)/(i.hi - i.lo + 1e-32))
	n = ++i._data[b]
	if (n >  i._maxb)
	  i._maxb=n
}
function Histshow(i,   scale,gap,b,n,show) {
	scale = i._maxb > i.max ? i.max/i._maxb : 1
	gap = (i.hi - i.lo)/i.bins
	for(b=0; b< i.bins; b++) { 
		n = i._data[b]
		show = n > 0 ? n : ""
    printf(i.fmt " " show "\n", 
					 i.lo + b*gap,
					 chars(n * scale, i.char))
}}
function Cliffs(i, want) {
	i.large  = 0.475
  i.medium = 0.33
	i.small  = 0.147
	i.want   = either(want,"small"   )   
	have(i,"as","Cli")
	have(i,"bs","Cli")
}
function CliffsCriteria(i) {
  return abs(i.gt - i.lt)/(i.n+1e-31) < i[i.want]
}
function Cli(i)      { i.gt = i.lt=0; i.pos=1; has(i,"all") }
function Cliupto(i)  { return i.pos }
function Cliinc(i)   { return i.pos++ }
function Cliat(i)    { return i.all[i.pos] }
function Climore(i)  { return i.pos<length(i.all) }
function Cliend(i)   { return i.pos==length(i.all) }
function Cliabove(i) { return length(i.all) - i.pos }

function CliffsThinkFast(i,lst1,lst2,   x,y,z,one,two,tmp) {
	i.n = length(lst1) * length(lst2)
	x="as"
	y="bs"
	asort(lst1, i[x])
	asort(lst2, i[y])
	o(i[x],x)
	o(i[y],y)
	print "li",length(i[x]),Climore(i[x]), Climore(i[y])

	while( Climore(i[x]) &&  Climore(i[y])) {
		if ( Cliat(i[x]) > Cliat(i[y]) ) {
			tmp= x
			x  = y
			y  = tmp 
		}
		one = Cliat(i[x])
		two = Cliat(i[y])
		print ">",x,y,one,two
		if( one < two )
			i[x].lt += Cliabove( Cliat(i[y]) ) + 1
		else if( one > two )
			i[x].gt += Cliupto(  Cliat(i[y]) ) ;
		Cliinc( i[x] )
}
  print i["as"].lt, i["as"].gt}

function CliffsThinkSlow(i,lst1,lst2,     j,k,n,x,y,gt,lt) {
	print("::",i.lt,i.gt)
	for(j in lst1)
		for(k in lst2) {
			x=lst1[j]
			y=lst2[k]
			i.n++
			if (x > y) i.gt++
			if (x < y) i.lt++
}}
function cliffs(lst1,lst2,   how,i) {
   Cliffs(i)
	 how = either(how,"CliffsThinkFast")
	 @how(i,lst1,lst2)
	 return CliffsCriteria(i)
}
